# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
 
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  eslint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    
    steps:

      - name: Checkout code 
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install eslint --no-save

      - name: Run ESLint
        run: npx eslint --config .eslintrc.json .
        continue-on-error: false
   


  # This workflow contains a single job called "build"
  test:

    needs: eslint
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code 
        uses: actions/checkout@v3


      - name: Create env file
        run: |
          mkdir -p .env && touch .env/.test.env
          echo "${{secrets.TEST_ENV}}" > .env/.test.env
      
      - name: add secrets to repo
        id: add-secrets
        run: |
          mkdir -p secrets && touch secrets/serviceAccountKey.json
          echo "${{secrets.FIREBASE_KEY}}" | base64 --decode > secrets/serviceAccountKey.json

      # Runs a single command using the runners shell
      - name: Build and test Docker image
        run: |
          npm run test-docker | tee logfile.txt

      - name: check logfile.txt
        run: |
          cat logfile.txt

      - name: Check Jest exit code
        run: |
          last_line=$(tail -n 1 logfile.txt)
          if [[ "$last_line" != *"cerana-test-container exited with code 0"* ]]; then
            echo "Error: cerana-test-container did not exit with code 0"
            exit 1
          fi
